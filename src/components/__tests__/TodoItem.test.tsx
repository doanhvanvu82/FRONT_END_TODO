import { render } from "@testing-library/react";
import { screen, fireEvent, within } from "@testing-library/dom";
import { vi, describe, test, expect } from "vitest";
import TodoItem from "../TodoItem";
import { Todo } from "../TodoApp";

const mockTodo: Todo = {
  id: 1,
  title: "Test todo",
  description: "Test description",
  completed: false,
  createdAt: "2024-07-01T10:00:00.000Z",
  deadlineAt: "2024-07-10T10:00:00.000Z",
  completedAt: undefined,
  priority: "high",
};

describe("TodoItem", () => {
  test("renders todo title, description, priority, and dates", () => {
    const mockOnToggle = vi.fn();
    const mockOnDelete = vi.fn();

    const { container } = render(
      <TodoItem
        todo={mockTodo}
        onToggle={mockOnToggle}
        onDelete={mockOnDelete}
      />
    );

    const todoWrapper = container; // or add `data-testid="todo-item"` n·∫øu c·∫ßn gi·ªõi h·∫°n

    expect(screen.getByText("Test todo")).toBeInTheDocument();
    expect(screen.getByText("Test description")).toBeInTheDocument();

    // ∆Øu ti√™n cao c√≥ th·ªÉ xu·∫•t hi·ªán ·ªü badge v√† n√∫t => check b·∫±ng getAllByText
    const priorityBadges = screen.getAllByText(/üî¥ Cao/i);
    expect(priorityBadges.length).toBeGreaterThanOrEqual(1);

    expect(screen.getAllByText(/üî¥ Cao/i).length).toBeGreaterThan(0);
    expect(
      screen.getByText((content) => content.includes("ƒê√£ t·∫°o"))
    ).toBeInTheDocument();
    expect(
      screen.getByText((content) => content.includes("H·∫°n ch√≥t"))
    ).toBeInTheDocument();
  });

  test("calls onToggle when checkbox is clicked", () => {
    const mockOnToggle = vi.fn();
    const mockOnDelete = vi.fn();

    render(
      <TodoItem
        todo={mockTodo}
        onToggle={mockOnToggle}
        onDelete={mockOnDelete}
      />
    );

    const toggleButton = screen.getAllByRole("button", {
      name: /ƒê√°nh d·∫•u l√† ƒë√£ ho√†n th√†nh/i,
    })[0];

    fireEvent.click(toggleButton);
    expect(mockOnToggle).toHaveBeenCalledWith(1);
  });

  test("calls onDelete when delete is confirmed in dialog", async () => {
    const mockOnToggle = vi.fn();
    const mockOnDelete = vi.fn();

    render(
      <TodoItem
        todo={mockTodo}
        onToggle={mockOnToggle}
        onDelete={mockOnDelete}
      />
    );

    // B∆∞·ªõc 1: Click v√†o n√∫t m·ªü dialog
    const triggerDeleteButton = screen.getByRole("button", {
      name: /Xo√° c√¥ng vi·ªác/i,
    });
    fireEvent.click(triggerDeleteButton);

    // B∆∞·ªõc 2: Click n√∫t x√°c nh·∫≠n "X√≥a"
    const confirmButton = await screen.findByRole("button", { name: /^X√≥a$/i });
    fireEvent.click(confirmButton);

    // ‚úÖ Ki·ªÉm tra xem ƒë√£ g·ªçi h√†m onDelete
    expect(mockOnDelete).toHaveBeenCalledWith(1);
  });

  test("shows completed styling and completedAt date for completed todo", () => {
    const completedTodo = {
      ...mockTodo,
      completed: true,
      completedAt: "2024-07-11T12:00:00.000Z",
    };

    const mockOnToggle = vi.fn();
    const mockOnDelete = vi.fn();

    render(
      <TodoItem
        todo={completedTodo}
        onToggle={mockOnToggle}
        onDelete={mockOnDelete}
      />
    );

    const todoText = screen.getByText("Test todo");
    expect(todoText).toHaveClass("line-through");

    expect(screen.getByText(/Ho√†n th√†nh:/i)).toBeInTheDocument();
  });
});